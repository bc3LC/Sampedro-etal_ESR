<?xml version="1.0" encoding="UTF-8"?>
<queries>

   <aQuery>
     <all-regions/>
            <query title="LUC emissions by region">
                <axis1 name="LandLeaf">LandLeaf</axis1>
                <axis2 name="Year">land-use-change-emission[@year]</axis2>
                <xPath buildList="true" dataName="land-use-change-emission" group="false" sumAll="true">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//
                land-use-change-emission[@year&gt;1970]/text()</xPath>
                <comments/>
            </query>
   </aQuery>

   <aQuery>
     <all-regions/>
            <emissionsQueryBuilder title="nonCO2 emissions by region">
                <axis1 name="GHG">GHG</axis1>
                <axis2 name="Year">emissions</axis2>
                <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' (:collapse:) or @type = 'resource' (:collapse:)](: / *[@type = 'subresource' (: collapse :)] :)//
            *[@type = 'GHG']/emissions/node()</xPath>
                <comments/>
            </emissionsQueryBuilder>
   </aQuery>


<aQuery>
      <all-regions/>
        <gdpQueryBuilder title="GDP MER by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">gdp-mer</axis2>
            <xPath buildList="true" dataName="gdp-mer" group="false" sumAll="false">GDP/gdp-mer/text()</xPath>
            <comments/>
        </gdpQueryBuilder>
	</aQuery>

<aQuery>
      <all-regions/>
        <gdpQueryBuilder title="GDP per capita MER by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">gdp-per-capita-mer</axis2>
            <xPath buildList="true" dataName="gdp-per-capita-mer" group="false" sumAll="false">GDP/gdp-per-capita-mer/text()</xPath>
            <comments/>
        </gdpQueryBuilder>
	</aQuery>

     <aQuery>
		<all-regions/>
         <demographicsQuery title="Population by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">populationMiniCAM</axis2>
            <xPath buildList="true" dataName="total-population" group="false" sumAll="false">demographics/populationMiniCAM/total-population/node()</xPath>
            <comments/>
         </demographicsQuery>
      </aQuery>

	<aQuery>
      <all-regions/>
<supplyDemandQuery title="primary energy consumption by region (avg fossil efficiency)">
                <axis1 name="fuel">input[@name]</axis1>
                <axis2 name="Year">demand-physical[@vintage]</axis2>
                <xPath buildList="true" dataName="input" group="false" sumAll="false">
                    <![CDATA[ 
      	 	 	 declare function local:get-weighted-eff($outputs as node()*) as node()* {
			 	 		   unordered {
			 			     for $year in distinct-values($outputs/physical-output/@vintage)
			 		             let $eff_unweight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                               let $eff_curr := $res/parent::*/following-sibling::input-energy[1]/IO-coefficient[@vintage = $year]
			 		                               (: where $res/physical-output/@vintage = $year :)
			 		                               return $res div $eff_curr),
			 			             $weight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                         (: where $res/physical-output/@vintage = $year :)
			 		                         return $res),
			 			             $eff_weighted := $eff_unweight div $weight
			 		             return element efficiency-weighted {attribute year { $year }, text { $eff_weighted }}
			             		}
			 	 	 };
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 		 (: let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
			 	 		 return
			 	 		 if(local-name($parent) != 'scenario')
			 	 		 then local:append-heirarchy($parent/parent::*, $new_node)
			 	 		 else document { $new_node } :)
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*, $weighted_effs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs (:,
			 	 	 $weighted_eff in $weighted_effs :)
			 	 	 let $new_output :=  (: element tempParent { :)
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output div $weighted_effs[@year=$output/@vintage] }
			 	 		 }(: ,
			 	 		 element keyword {
			 	 			 attribute primary-consumption { (: if($output/parent::*/following-sibling::keyword[fn:exists(@primary-renewable)])
			 	 						 then :) $output/parent::*/following-sibling::keyword/@primary-renewable
			 	 						 (: else $output/parent::*/parent::*/@name :)
			 	 		       }
			 	 		 } :)
			 	 	 (: } :)
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 (:where $output/@vintage = $weighted_eff/@year:)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:check-keyword($values as node()*) as node()* {
			 	 	 	unordered {
			 	 		for $value in $values
			 	 		let $input := $value/parent::*/parent::*,
			 	 		    $keyword_name :=
			 	 		        (: if($input/following-sibling::keyword[fn:exists(@primary-consumption)])
			 	 			then :) $input/following-sibling::keyword/@primary-consumption
			 	 			(: else $input/@name :), 
			 	 		    $new_parent := element {local-name($input)} {$input/@*, 
			 	 			$value/parent::*,
			 	 		        element keyword { attribute primary-consumption {$keyword_name} }
			 	 		        },
			 	 		    $new_root := local:append-heirarchy($input/parent::*, $new_parent)
			 	 		return $new_root//text()
			 	 		}
			 	 	};
			 	 
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 (: unordered { :)
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '),
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
			 	 	 local:get-primary-renewable($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or starts-with(@name,'elec_'))]//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or starts-with(@name, 'elec_'))]//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 central production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 forecourt production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 	 	 	| (: get the primaries :)
	 	 						(: local:check-keyword( :) $currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy[not(contains(@name, 'water'))]/demand-physical/text() (: ) :)
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
			 	 	 (: } :)
	 	 }; 
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))
                 
            ]]>
                </xPath>
                <comments/>
                <labelRewriteList append-values="false">
                    <level name="input">
                        <rewrite from="exotic-elect" to="j breakthrough"/>
                        <rewrite from="wind-H2" to="g wind"/>
                        <rewrite from="biomass" to="d biomass"/>
                        <rewrite from="traditional biomass" to="j traditional biomass"/>
                        <rewrite from="regional corn for ethanol" to="d biomass"/>
                        <rewrite from="crude oil" to="a oil"/>
                        <rewrite from="nuclear-elect" to="e nuclear"/>
                        <rewrite from="solar-H2" to="h solar"/>
                        <rewrite from="regional natural gas" to=""/>
                        <rewrite from="regional biomassOil" to="d biomass"/>
                        <rewrite from="traded unconventional oil" to="a oil"/>
                        <rewrite from="geothermal-elect" to="i geothermal"/>
                        <rewrite from="natural gas" to="b natural gas"/>
                        <rewrite from="wholesale gas" to=""/>
                        <rewrite from="hydro-elect" to="f hydro"/>
                        <rewrite from="solar-elect" to="h solar"/>
                        <rewrite from="coal" to="c coal"/>
                        <rewrite from="traded oil" to="a oil"/>
                        <rewrite from="traded natural gas" to="b natural gas"/>
                        <rewrite from="traded coal" to="c coal"/>
                        <rewrite from="elect_td_ind" to=""/>
                        <rewrite from="wind-elect" to="g wind"/>
                        <rewrite from="total biomass" to="d biomass"/>
                        <rewrite from="nuclear-H2" to="e nuclear"/>
                    </level>
                </labelRewriteList>
            </supplyDemandQuery>
	</aQuery>


     <aQuery>
		<all-regions/>
                <supplyDemandQuery title="hydrogen production by tech">
                    <axis1 name="technology">technology</axis1>
                    <axis2 name="Year">physical-output[@vintage]</axis2>
                    <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='H2 central production' or @name='H2 wholesale dispensing' or @name='H2 industrial')]/
               *[@type='subsector' and not (@name='H2 delivery')]/*[@type='technology']/*[@type='output' (:collapse:)]/
               physical-output/node()</xPath>
                    <comments/>
                </supplyDemandQuery>
      </aQuery>

     
     <aQuery>
		<all-regions/>
                <supplyDemandQuery title="gas production by tech">
                    <axis1 name="technology">technology</axis1>
                    <axis2 name="Year">physical-output[@vintage]</axis2>
                    <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='gas processing')]/*[@type='subsector']/
               *[@type='technology']/*[@type='output' (:collapse:)]/physical-output/node()</xPath>
                    <comments/>
                </supplyDemandQuery>
      </aQuery>

 <aQuery>
		<all-regions/>
                <supplyDemandQuery title="gas pipeline inputs and outputs">
                    <axis1 name="sector">sector</axis1>
                    <axis2 name="Year">physical-output[@vintage]</axis2>
                    <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='gas processing' or @name='gas pipeline')]//
               *[@type='output' (:collapse:)]/physical-output/node()</xPath>
                    <comments/>
                </supplyDemandQuery>
      </aQuery>

 <aQuery>
		<all-regions/>
                <supplyDemandQuery title="gas consumption by sector">
                    <axis1 name="input">input</axis1>
                    <axis2 name="Year">demand-physical[@vintage]</axis2>
                    <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' ]//*[@type='input' and (@name='delivered gas' or
               @name='wholesale gas')]/demand-physical/node()</xPath>
                    <comments/>
                </supplyDemandQuery>
      </aQuery>

 <aQuery>
		<all-regions/>
<supplyDemandQuery title="total final energy by aggregate sector">
                    <axis1 name="sector">sector</axis1>
                    <axis2 name="Year">demand-physical[@vintage]</axis2>
                    <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' (:collapse:) and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn_') or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()</xPath>
                    <comments/>
                    <labelRewriteList append-values="false">
                        <level name="sector">
                            <rewrite from="trn_pass_road_LDV_4W" to="transportation"/>
                            <rewrite from="trn_pass_road" to="transportation"/>
                            <rewrite from="trn_pass_road_LDV_2W" to="transportation"/>
                            <rewrite from="trn_freight_road" to="transportation"/>
                            <rewrite from="trn_freight" to="transportation"/>
                            <rewrite from="comm others" to="building"/>
                            <rewrite from="comm heating" to="building"/>
                            <rewrite from="comm cooling" to="building"/>
                            <rewrite from="other industrial energy use" to="industry"/>
                            <rewrite from="trn_pass_road_LDV" to="transportation"/>
                            <rewrite from="trn_pass_road_bus" to="transportation"/>
                            <rewrite from="trn_aviation_intl" to="transportation"/>
                            <rewrite from="trn_pass" to="transportation"/>
                            <rewrite from="cement" to="industry"/>
                            <rewrite from="N fertilizer" to="industry"/>
                            <rewrite from="resid heating" to="building"/>
                            <rewrite from="resid others" to="building"/>
                            <rewrite from="process heat cement" to="industry"/>
                            <rewrite from="resid cooling" to="building"/>
                            <rewrite from="other industrial feedstocks" to="industry"/>
                            <rewrite from="trn_shipping_intl" to="transportation"/>
							<rewrite from="iron and steel" to="industry"/>
 		           			<rewrite from="agricultural energy use" to="industry"/>
 		           			<rewrite from="aluminum" to="industry"/>
							<rewrite from="alumina" to="industry"/>
 		           			<rewrite from="chemical energy use" to="industry"/>
 		           			<rewrite from="construction energy use" to="industry"/>
							<rewrite from="chemical feedstocks" to="industry"/>
 		           			<rewrite from="construction feedstocks" to="industry"/>
 		           			<rewrite from="mining energy use" to="industry"/>
							<rewrite from="desalinated water" to="industry"/>
							<rewrite from="industrial wastewater treatment" to="industry"/>
							<rewrite from="industrial water abstraction" to="industry"/>
							<rewrite from="industrial water treatment" to="industry"/>
							<rewrite from="irrigation water abstraction" to="industry"/>
							<rewrite from="municipal wastewater treatment" to="industry"/>
							<rewrite from="municipal water abstraction" to="industry"/>
							<rewrite from="municipal water distribution" to="industry"/>
							<rewrite from="municipal water treatment" to="industry"/>
                        </level>
                    </labelRewriteList>
                </supplyDemandQuery>
      </aQuery>


 <aQuery>
		<all-regions/>
                <supplyDemandQuery title="final energy prices">
                    <axis1 name="fuel">sector</axis1>
                    <axis2 name="Year">cost</axis2>
                    <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='wholesale gas' or @name='delivered gas' or
            @name='delivered coal' or @name='delivered biomass' or @name='traditional biomass' or
            @name='elect_td_ind' or @name='elect_td_bld' or @name='elect_td_trn' or
            @name='H2 wholesale dispensing' or @name='H2 wholesale delivery' or @name='H2 retail dispensing' or @name='H2 retail delivery' or
            @name='refined liquids industrial' or @name='refined liquids enduse')]/
            cost/text()</xPath>
                    <comments/>
                </supplyDemandQuery>
      </aQuery>


      <aQuery>
		<all-regions/>
<supplyDemandQuery title="CO2 emissions by sector (no bio)">
                <axis1 name="sector">sector[@name]</axis1>
                <axis2 name="Year">emissions[@year]</axis2>
                <xPath buildList="true" dataName="input" group="false" sumAll="false"><![CDATA[
                     
            declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
            let $scn := $parent/ancestor::scenario,
            $rgn := $parent (: /ancestor::region :)
            return
            document { element scenario {
            $scn/@*,
            element region {
            $rgn/@*,
            $append
            }
            }
            }
            (: I can get by with just the scenario and region
            let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
            return
            if(local-name($parent) != 'scenario')
            then local:append-heirarchy($parent/parent::*, $new_node)
            else document { $new_node } :)
            }; 
            declare function local:get-carbon-coef($good as xs:string) as xs:decimal {
            let $carbonCoefs := (
            <PrimaryFuelCO2Coef name="biomass">0</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="crude oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered biomass">23</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="gas pipeline">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="gas processing">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="limestone">0.08</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="natural gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refined liquids enduse">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refined liquids industrial">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refining">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional biomass">23</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional biomassOil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional corn for ethanol">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional natural gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional sugar for ethanol">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="traded unconventional oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="unconventional oil">21.1</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="unconventional oil production">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="wholesale gas">14.2</PrimaryFuelCO2Coef>),
            $currCoef := $carbonCoefs[@name=$good]/text()
            return if(exists($currCoef)) then $currCoef else 0.0
            };
            
            
            declare function local:is-carbonatious-fuel($good as xs:string) as xs:boolean {
            not(local:get-carbon-coef($good) = 0.0)
            };
            declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
            if(empty($inputNameQueue)) then $coefs
            else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('traded unconventional oil'),
            $inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]]) or not(local:is-carbonatious-fuel($inputNameQueue[1])))
            then 
            local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa)
            else
            let $inputName := $inputNameQueue[1],
            $newInputNameQueue := remove($inputNameQueue, 1),
            $useInputs := $currTree//*[@type='input' and @name=$inputName],
            $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name),
            $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
            return element input {
            attribute vintage { $vintage },
            text {
            sum($useInputs/demand-physical[@vintage=$vintage])
            }
            },
            $new_coefs := if(empty($useSectors)) then
            $coefs
            else
            $coefs | element sector {
            attribute name { $inputName },
            for $output in $useSectors
            return element output {
            attribute name { $output },
            for $inputSum in $totalInputSum
            let $currSectorInputs := $useInputs[ancestor::*[@type='sector' and @name=$output]],
            $outputSum := sum($currSectorInputs/demand-physical[@vintage=$inputSum/@vintage]),
            $carbonIn := sum($currSectorInputs/parent::*//carbon-content[@vintage=$inputSum/@vintage]),
            $carbonOut := sum($currSectorInputs/parent::*/output-primary/physical-output[@vintage=$inputSum/@vintage]) *
            local:get-carbon-coef($output)
            return (element share {
            attribute vintage { $inputSum/@vintage },
            text { $outputSum div $inputSum }
            }, element carbon_ratio {
            attribute vintage { $inputSum/@vintage },
            text{ if($carbonIn > 0) then $carbonOut div $carbonIn else 0 }
            })
            }
            }
            return 
            local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa)
            };
            declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* {
            if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) > 0.001) then
            for $output in $coefs[@name=$outputName]/output
            let $emiss_go := for $year in distinct-values($emissions/@year)
            let $emissThisVintage := $emissions[@year=$year],
            $firstEmiss := $emissThisVintage[1],
            $emissSum := sum($emissThisVintage),
            $shareThisVintage := $output/share[@vintage=$year],
            $carbonRatioThisVintage := $output/carbon_ratio[@vintage=$year],
            $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage
            where $coefThisVintage > 0
            return element { local-name($firstEmiss) } {
            $firstEmiss/@*,
            text{ $emissSum * $coefThisVintage }
            },
            $emiss_stay := for $year in distinct-values($emissions/@year)
            let $emissThisVintage := $emissions[@year=$year],
            $firstEmiss := $emissThisVintage[1],
            $emissSum := sum($emissThisVintage),
            $shareThisVintage := $output/share[@vintage=$year],
            $carbonRatioThisVintage := 1.0 - $output/carbon_ratio[@vintage=$year],
            $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage 
            where $coefThisVintage > 0
            return element { local-name($firstEmiss) } {
            $firstEmiss/@*,
            text{ $emissSum * $coefThisVintage }
            }
            return local:apply-coefs($output/@name, $emiss_go, $coefs) |
            element sector {
            attribute name { $output/@name},
            attribute type { 'sector' },
            $emiss_stay
            }
            else if( abs(sum($emissions)) > 0.001) then
            element sector {
            attribute name { $outputName },
            attribute type { 'sector' },
            $emissions
            }
            else
            (: These are the residuals from chasing simulenaties, I've left this here
            for debuging purposes :)
            element sector {
            attribute name { $outputName },
            attribute type { 'sector' }(:,
            $emissions:)
            }
            };
            declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
            (:unordered { :) 	
            let $regionsG := if(not($regions[1] = 'Global'))
            then $regions
            else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
            return
            for $scenario in $scenarios, 	    
            $region in $regionsG 	
            let $scenario_split := tokenize($scenario, ' '), 	    
            $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
            $sector_emiss := $currTree/*[@type='sector' and not(@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')]//CO2[@type='GHG' (:collapse:) and @name='CO2']/emissions/text(),
            $currEmissSectors := $currTree/*[@type='sector' and (@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')],
            $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false()),
            $downstream_emiss := for $sectorName in distinct-values($currEmissSectors/@name)
            return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2[@name='CO2']/emissions, $coefs))//text() 
            return ($sector_emiss, $downstream_emiss )
            (:  } :)
            };
            local:run-emiss-by-enduse((:scenarios:), (:regions:), (:collection:))
            
         
                ]]></xPath>
                <comments/>
                <labelRewriteList append-values="false">
                    <level name="sector">
                        <rewrite from="elec_Gen_III" to="electricity"/>
                        <rewrite from="elec_CSP_storage" to="electricity"/>
                        <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                        <rewrite from="elec_geothermal" to="electricity"/>
                        <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                        <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                        <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                        <rewrite from="elec_coal (IGCC)" to="electricity"/>
                        <rewrite from="elec_gas (CC)" to="electricity"/>
                        <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                        <rewrite from="elec_coal (conv pul)" to="electricity"/>
                        <rewrite from="elec_CSP" to="electricity"/>
                        <rewrite from="elec_biomass (conv)" to="electricity"/>
                    </level>
                </labelRewriteList>
            </supplyDemandQuery>

      </aQuery>
                

  <aQuery>
  <all-regions/>
<supplyDemandQuery title="final energy consumption by fuel">
                    <axis1 name="input">input</axis1>
                    <axis2 name="Year">demand-physical[@vintage]</axis2>
                    <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and ((@name='building' or @name='industry' or @name='transportation') or
            (exists(child::keyword/@final-energy)))]//*[@type='input' and
            not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn_') or @name='oil-credits')]/
            demand-physical[@unit='EJ']/node()</xPath>
                    <comments/>
                    <labelRewriteList append-values="false">
                        <level name="input">
                            <rewrite from="elect_td_bld" to="electricity"/>
                            <rewrite from="regional coal" to="coal"/>
                            <rewrite from="H2 industrial" to="hydrogen"/>
                            <rewrite from="refined liquids enduse" to="refined liquids"/>
                            <rewrite from="elect_td_trn" to="electricity"/>
                            <rewrite from="delivered coal" to="coal"/>
                            <rewrite from="delivered gas" to="gas"/>
                            <rewrite from="wholesale gas" to="gas"/>
                            <rewrite from="H2 wholesale dispensing" to="hydrogen"/>
                            <rewrite from="H2 retail dispensing" to="hydrogen"/>
                            <rewrite from="regional biomass" to="biomass"/>
                            <rewrite from="H2 retail delivery" to="hydrogen"/>
                            <rewrite from="elect_td_ind" to="electricity"/>
                            <rewrite from="delivered biomass" to="biomass"/>
                            <rewrite from="refined liquids industrial" to="refined liquids"/>
                            <rewrite from="H2 wholesale delivery" to="hydrogen"/>
                        </level>
                    </labelRewriteList>
                </supplyDemandQuery>
 </aQuery>


     <aQuery>
		<all-regions/>
            <marketQuery title="prices of all markets">
                <axis1 name="market">market</axis1>
                <axis2 name="Year">market</axis2>
                <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true()]/price/node()</xPath>
                <comments/>
            </marketQuery>
      </aQuery>

<aQuery>
		<all-regions/>
            <supplyDemandQuery title="regional natural gas by tech and vintage">
                <axis1 name="technology">technology[@name]</axis1>
                <axis2 name="Year">physical-output[@vintage]</axis2>
                <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='regional natural gas')]/*[@type='subsector']//*[@type='technology']/*[@type='output']/physical-output/node()</xPath>
                <comments/>
                <showAttribute attribute-name="year" level="technology"/>
            </supplyDemandQuery>
</aQuery>

<aQuery>
		<all-regions/>
<supplyDemandQuery title="traded gas by tech and vintage">
                    <axis1 name="technology">technology</axis1>
                    <axis2 name="Year">physical-output[@vintage]</axis2>
                    <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and contains(@name,'traded')]/*[@type='subsector']/
               *[@type='technology']/output-primary[@type='output']/physical-output/node()</xPath>
                    <comments/>
                    <showAttribute attribute-name="year" level="technology"/>
                </supplyDemandQuery>
</aQuery>


    </queries>

