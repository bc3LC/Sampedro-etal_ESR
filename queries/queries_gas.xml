<?xml version="1.0" encoding="UTF-8"?>
<queries>

	<aQuery>
      <all-regions/>
<supplyDemandQuery title="primary energy consumption by region (avg fossil efficiency)">
                <axis1 name="fuel">input[@name]</axis1>
                <axis2 name="Year">demand-physical[@vintage]</axis2>
                <xPath buildList="true" dataName="input" group="false" sumAll="false">
                    <![CDATA[ 
      	 	 	 declare function local:get-weighted-eff($outputs as node()*) as node()* {
			 	 		   unordered {
			 			     for $year in distinct-values($outputs/physical-output/@vintage)
			 		             let $eff_unweight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                               let $eff_curr := $res/parent::*/following-sibling::input-energy[1]/IO-coefficient[@vintage = $year]
			 		                               (: where $res/physical-output/@vintage = $year :)
			 		                               return $res div $eff_curr),
			 			             $weight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                         (: where $res/physical-output/@vintage = $year :)
			 		                         return $res),
			 			             $eff_weighted := $eff_unweight div $weight
			 		             return element efficiency-weighted {attribute year { $year }, text { $eff_weighted }}
			             		}
			 	 	 };
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 		 (: let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
			 	 		 return
			 	 		 if(local-name($parent) != 'scenario')
			 	 		 then local:append-heirarchy($parent/parent::*, $new_node)
			 	 		 else document { $new_node } :)
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*, $weighted_effs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs (:,
			 	 	 $weighted_eff in $weighted_effs :)
			 	 	 let $new_output :=  (: element tempParent { :)
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output div $weighted_effs[@year=$output/@vintage] }
			 	 		 }(: ,
			 	 		 element keyword {
			 	 			 attribute primary-consumption { (: if($output/parent::*/following-sibling::keyword[fn:exists(@primary-renewable)])
			 	 						 then :) $output/parent::*/following-sibling::keyword/@primary-renewable
			 	 						 (: else $output/parent::*/parent::*/@name :)
			 	 		       }
			 	 		 } :)
			 	 	 (: } :)
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 (:where $output/@vintage = $weighted_eff/@year:)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:check-keyword($values as node()*) as node()* {
			 	 	 	unordered {
			 	 		for $value in $values
			 	 		let $input := $value/parent::*/parent::*,
			 	 		    $keyword_name :=
			 	 		        (: if($input/following-sibling::keyword[fn:exists(@primary-consumption)])
			 	 			then :) $input/following-sibling::keyword/@primary-consumption
			 	 			(: else $input/@name :), 
			 	 		    $new_parent := element {local-name($input)} {$input/@*, 
			 	 			$value/parent::*,
			 	 		        element keyword { attribute primary-consumption {$keyword_name} }
			 	 		        },
			 	 		    $new_root := local:append-heirarchy($input/parent::*, $new_parent)
			 	 		return $new_root//text()
			 	 		}
			 	 	};
			 	 
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
			 	 	 (: unordered { :)
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '),
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
			 	 	 local:get-primary-renewable($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or starts-with(@name,'elec_'))]//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or starts-with(@name, 'elec_'))]//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 central production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 forecourt production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 	 	 	| (: get the primaries :)
	 	 						(: local:check-keyword( :) $currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy[not(contains(@name, 'water'))]/demand-physical/text() (: ) :)
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
			 	 	 (: } :)
	 	 }; 
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))
                 
            ]]>
                </xPath>
                <comments/>
                <labelRewriteList append-values="false">
                    <level name="input">
                        <rewrite from="exotic-elect" to="j breakthrough"/>
                        <rewrite from="wind-H2" to="g wind"/>
                        <rewrite from="biomass" to="d biomass"/>
                        <rewrite from="traditional biomass" to="j traditional biomass"/>
                        <rewrite from="regional corn for ethanol" to="d biomass"/>
                        <rewrite from="crude oil" to="a oil"/>
                        <rewrite from="nuclear-elect" to="e nuclear"/>
                        <rewrite from="solar-H2" to="h solar"/>
                        <rewrite from="regional natural gas" to=""/>
                        <rewrite from="regional biomassOil" to="d biomass"/>
                        <rewrite from="traded unconventional oil" to="a oil"/>
                        <rewrite from="geothermal-elect" to="i geothermal"/>
                        <rewrite from="natural gas" to="b natural gas"/>
                        <rewrite from="wholesale gas" to=""/>
                        <rewrite from="hydro-elect" to="f hydro"/>
                        <rewrite from="solar-elect" to="h solar"/>
                        <rewrite from="coal" to="c coal"/>
                        <rewrite from="traded oil" to="a oil"/>
                        <rewrite from="traded natural gas" to="b natural gas"/>
                        <rewrite from="traded coal" to="c coal"/>
                        <rewrite from="elect_td_ind" to=""/>
                        <rewrite from="wind-elect" to="g wind"/>
                        <rewrite from="total biomass" to="d biomass"/>
                        <rewrite from="nuclear-H2" to="e nuclear"/>
                    </level>
                </labelRewriteList>
            </supplyDemandQuery>
	</aQuery>

    </queries>

